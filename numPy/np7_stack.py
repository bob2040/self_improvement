"""
组合与拆分，
要想组合和拆分，那么数组的维数必须相同，否则无法组合
"""
import numpy as np

# 垂直组合 numpy.vstack((上, 下))
a = np.arange(11, 20).reshape(3, 3)
b = np.arange(21, 30).reshape(3, 3)
print(a, b, sep='\n')
# [[11 12 13]
#  [14 15 16]
#  [17 18 19]]
# [[21 22 23]
#  [24 25 26]
#  [27 28 29]]
c = np.vstack((a, b))  # a放在b的上面
print(c)
# [[11 12 13]
#  [14 15 16]
#  [17 18 19]
#  [21 22 23]
#  [24 25 26]
#  [27 28 29]]

# 垂直拆分 numpy.vsplit(数组, 份数)
a, b = np.vsplit(c, 2)  # 将c数组沿着垂直方向拆分成2份
print(a, b, sep='\n')
# [[11 12 13]
#  [14 15 16]
#  [17 18 19]]
# [[21 22 23]
#  [24 25 26]
#  [27 28 29]]

# 水平组合 numpy.hstack((左, 右))
d = np.hstack((a, b))
print(a, b, sep='\n')
# [[11 12 13]
#  [14 15 16]
#  [17 18 19]]
# [[21 22 23]
#  [24 25 26]
#  [27 28 29]]
print(d)
# [[11 12 13 21 22 23]
#  [14 15 16 24 25 26]
#  [17 18 19 27 28 29]]

# 水平拆分 numpy.hsplit(数组, 份数)
a, b = np.hsplit(d, 2)
print(a, b, sep='\n')
# [[11 12 13]
#  [14 15 16]
#  [17 18 19]]
# [[21 22 23]
#  [24 25 26]
#  [27 28 29]]

# 深度组合 numpy.dstack((前, 后))
e = np.dstack((a, b))
print(a, b, sep='\n')
# [[11 12 13]
#  [14 15 16]
#  [17 18 19]]
# [[21 22 23]
#  [24 25 26]
#  [27 28 29]]
print(e)  # e为三维数组，3页，3行，2列，每一页中，a、b对应的行作为e的列，且a的在前，b的在后
# [[[11 21]
#   [12 22]
#   [13 23]]
#  [[14 24]
#   [15 25]
#   [16 26]]
#  [[17 27]
#   [18 28]
#   [19 29]]]

# 深度拆分 numpy.dsplit(数组, 份数)
a, b = np.dsplit(e, 2)
print(a, b, sep='\n')
# [[[11]
#   [12]
#   [13]]
#  [[14]
#   [15]
#   [16]]
#  [[17]
#   [18]
#   [19]]]
# [[[21]
#   [22]
#   [23]]
#  [[24]
#   [25]
#   [26]]
#  [[27]
#   [28]
#   [29]]]
print(a.T, b.T, sep='\n')
# [[[11 14 17]
#   [12 15 18]
#   [13 16 19]]]
# [[[21 24 27]
#   [22 25 28]
#   [23 26 29]]]
print(a.T[0], b.T[0], sep='\n')
# [[11 14 17]
#  [12 15 18]
#  [13 16 19]]
# [[21 24 27]
#  [22 25 28]
#  [23 26 29]]
print(a.T[0].T, b.T[0].T, sep='\n')  # 得到原来的a,b
# [[11 12 13]
#  [14 15 16]
#  [17 18 19]]
# [[21 22 23]
#  [24 25 26]
#  [27 28 29]]

# 行/列组合
a = a.ravel()
b = b.ravel()
print(a, b, sep='\n')
# [11 12 13 14 15 16 17 18 19]
# [21 22 23 24 25 26 27 28 29]

# 行组合 numpy.row_stack((上, 下))
f = np.row_stack((a, b))  # 它与np.vstack((a, b))等价
print(f)
# [[11 12 13 14 15 16 17 18 19]
#  [21 22 23 24 25 26 27 28 29]]

# 列组合 numpy.column_stack((左, 右))
g = np.column_stack((a, b))  # 它不等价于np.hstack((a, b))，它等价于np.c_[a, b]
print(g)
# [[11 21]
#  [12 22]
#  [13 23]
#  [14 24]
#  [15 25]
#  [16 26]
#  [17 27]
#  [18 28]
#  [19 29]]

h = np.hstack((a, b))
print(h)
# [11 12 13 14 15 16 17 18 19 21 22 23 24 25 26 27 28 29]

i = np.c_[a, b]  # c_这种写法在numpy里面实际是做了一个类型转换，也是基于column_stack实现的
print(i)
# [[11 21]
#  [12 22]
#  [13 23]
#  [14 24]
#  [15 25]
#  [16 26]
#  [17 27]
#  [18 28]
#  [19 29]]
