"""
改变维度
"""
import numpy as np
# 视图变维
# 数组.reshape(新维度) 返回数组新维度视图
# 数组.ravel() 返回数组的一维视图
a = np.arange(1, 9)
print(a)  # [1 2 3 4 5 6 7 8]
b = a.reshape(2, 4)  # 创建了a数组的视图b
print(b)
# [[1 2 3 4]
#  [5 6 7 8]]

c = b.reshape(2, 2, 2)
print(c)
# [[[1 2]
#   [3 4]]
#  [[5 6]
#   [7 8]]]

d = c.ravel()  # ravel()方法返回数组的一维视图
print(d)  # [1 2 3 4 5 6 7 8]

# 复制变维
e = c.flatten()
print(e)  # [1 2 3 4 5 6 7 8]

f = b.reshape(2, 2, 2).copy()  # copy() 方法 数组f变成副本，与前面的数组a就没关系了
print(f)
# [[[1 2]
#   [3 4]]
#  [[5 6]
#   [7 8]]]

print('*' * 10)
a += 10  # a数组中每个元素都加10
print(a, b, c, d, e, f, sep='\n')  # 分隔符采用换行符
# 运行结果发现数组a,b,c,d中的每个元素都加了10，而e仍然是[1 2 3 4 5 6 7 8]，因为 数组.flatten() 方法返回的是数组的一维副本，
# f仍然不变，因为 copy() 方法使然
# 所以 数组.flatten() 方法相当于 数组.ravel().copy()
# 注意副本和视图的区别！

# 就地变维
a.shape = (2, 2, 2)  # 修改 数组.shape 属性改变a数组本身的维度
print(a)
# [[[11 12]
#   [13 14]]
#  [[15 16]
#   [17 18]]]

a.resize(2, 4)  # 通过方法 数组.resize() 改变a数组本身的维度
print(a)
# [[11 12 13 14]
#  [15 16 17 18]]

# 视图转置
g = a.transpose()  # 注意，它与 g = a.reshape(4, 2)不同
print(g)
# [[11 15]
#  [12 16]
#  [13 17]
#  [14 18]]
# g = a.reshape(4, 2)
# print(g)
# [[11 12]
#  [13 14]
#  [15 16]
#  [17 18]]

h = a.T  # 通过转置属性T获得转置视图
print(h)
# [[11 15]
#  [12 16]
#  [13 17]
#  [14 18]]

print(e)  # [1 2 3 4 5 6 7 8]
print(e.T)  # [1 2 3 4 5 6 7 8]  一维数组无法转置，要想转置，要求数组至少是二维的

# 非要转换怎么办？变二维
# 方法一
# e.resize(8, 1)  # 是就地变维
# print(e)
# [[1]
#  [2]
#  [3]
#  [4]
#  [5]
#  [6]
#  [7]
#  [8]]
# 方法二
# print(np.array([e]).T)  # 加个[]，将其变为二维的
# [[1]
#  [2]
#  [3]
#  [4]
#  [5]
#  [6]
#  [7]
#  [8]]
# 方法三
# print(e.reshape(8, 1))
# [[1]
#  [2]
#  [3]
#  [4]
#  [5]
#  [6]
#  [7]
#  [8]]
# 方法四
print(e.reshape(-1, 1))  # -1是无效值，迫使numpy自己计算行数，这样就不用自己计算了
# [[1]
#  [2]
#  [3]
#  [4]
#  [5]
#  [6]
#  [7]
#  [8]]
